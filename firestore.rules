rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to get all user roles (primary role + roles array)
    function getUserRoles(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      let primaryRole = userDoc.data.role;
      let additionalRoles = userDoc.data.get('roles', []);
      return [primaryRole].concat(additionalRoles);
    }
    
    // Helper function to check if user has any of the specified roles
    function hasAnyRole(userId, allowedRoles) {
      let userRoles = getUserRoles(userId);
      return userRoles.hasAny(allowedRoles);
    }
    
    // Users can read/write their own user document, admins can read all user documents
    match /users/{userId} {
      allow read: if request.auth != null && (
        request.auth.uid == userId ||
        hasAnyRole(request.auth.uid, ['admin'])
      );
      allow write: if request.auth != null && (
        request.auth.uid == userId ||
        hasAnyRole(request.auth.uid, ['admin'])
      );
    }
    
    // User notification preferences - users can read/write their own preferences
    match /userNotificationPrefs/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Sub-organizations - read for all users (including guests), write for admins and limited write for purchasers
    match /subOrganizations/{subOrgId} {
      allow read: if true;
      allow write: if request.auth != null && (
        hasAnyRole(request.auth.uid, ['admin']) ||
        (
          hasAnyRole(request.auth.uid, ['purchaser']) &&
          request.resource.data.budgetAllocated == resource.data.budgetAllocated &&
          request.resource.data.budgetSpent is number
        )
      );
    }
    
    // Purchase Orders - allow read for everyone (including guests), complex rules for write operations based on role and status
    match /purchaseOrders/{poId} {
      allow read: if true;
      allow create: if request.auth != null && 
        hasAnyRole(request.auth.uid, ['director', 'admin']);
      allow update: if request.auth != null && (
        // Creator can update their own POs (both existing and new data should match)
        ((resource.data.creatorId == request.auth.uid || request.resource.data.creatorId == request.auth.uid) && 
         (resource.data.status in ['draft', 'declined'] || request.resource.data.status in ['draft', 'pending_approval'])) ||
        // Admins can approve/decline
        hasAnyRole(request.auth.uid, ['admin']) ||
        // Purchasers can mark as purchased
        (hasAnyRole(request.auth.uid, ['purchaser']) && 
         resource.data.status in ['approved', 'pending_purchase'])
      );
      // Allow users to delete their own POs
      allow delete: if request.auth != null;
    }
    
    // Transactions - read for all users (including guests), write for purchasers and admins only
    match /transactions/{transactionId} {
      allow read: if true;
      allow write: if request.auth != null && 
        hasAnyRole(request.auth.uid, ['purchaser', 'admin']);
    }
    
    // Audit logs - read only for authenticated users
    match /auditLogs/{logId} {
      allow read: if request.auth != null;
      allow write: if false; // Only server-side writes
    }
  }
}